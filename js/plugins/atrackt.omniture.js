// Generated by CoffeeScript 1.4.0

/*
Atrackt Omniture Plugin
https://github.com/brewster1134/atrackt
@author Ryan Brewster
@version 0.0.3
*/


(function() {

  window.Atrackt.registerPlugin('omniture', {
    send: function(obj) {
      var _ref;
      obj.categories = (_ref = obj.categories) != null ? _ref.join(this.options.delimiters.category) : void 0;
      obj = this.translatePropMap(obj);
      if ((typeof s !== "undefined" && s !== null) && s.tl) {
        this.buildSObject(obj);
        s.tl(true, 'o', this.buildLinkName(obj));
      } else {
        console.log('SITE CATALYST SCRIPT NOT LOADED!', obj);
      }
      return obj;
    },
    options: {
      version: 14,
      delimiters: {
        linkName: '/',
        category: '|'
      },
      propMap: {
        plugin: 'plugin',
        location: 'prop1',
        categories: 'prop2',
        value: 'prop3',
        event: 'prop4'
      }
    },
    buildSObject: function(obj) {
      var key, linkTrackVars, value;
      switch (this.options.version) {
        case 14:
          linkTrackVars = ['products', 'events'];
          for (key in obj) {
            value = obj[key];
            linkTrackVars.push(key);
          }
          s.linkTrackVars = linkTrackVars.join(',');
          $.extend(s, obj);
          break;
        case 15:
          s.contextData = obj;
      }
      return s;
    },
    buildLinkName: function(obj) {
      var linkName;
      linkName = [obj[this.options.propMap.location], obj[this.options.propMap.categories], obj[this.options.propMap.value]];
      return linkName.join(this.options.delimiters.linkName);
    },
    translatePropMap: function(obj) {
      var _globalData,
        _this = this;
      if (this.options.version > 14) {
        return obj;
      }
      _globalData = {};
      $.each(obj, function(k, v) {
        return _globalData[_this.keyLookup(k)] = v;
      });
      return _globalData;
    },
    keyLookup: function(key) {
      var _newKey;
      _newKey = this.options.propMap[key];
      if (!_newKey) {
        console.log('NO MAPPING FOR "' + key + '" FOUND.');
      }
      return _newKey || key;
    }
  });

}).call(this);
