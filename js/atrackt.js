// Generated by CoffeeScript 1.4.0

/*
Atrackt Tracking Library
https://github.com/brewster1134/atrackt
@version 0.4.0
@author Ryan Brewster
*/


(function() {

  if (window.console == null) {
    window.console = {
      log: function() {}
    };
  }

  window.Atrackt = {
    plugins: {},
    registerPlugin: function(name, attrs) {
      var _this = this;
      if (typeof attrs.send !== 'function') {
        return console.log("NO SEND METHOD DEFINED");
      }
      console.log('ATRACKT PLUGIN REGISTERED', name, attrs);
      attrs.bindEvents = function(eventsObject) {
        attrs.events = eventsObject;
        return $(function() {
          return _this._bindEvents(name, eventsObject);
        });
      };
      attrs.setOptions = function(options) {
        var pluginOptions;
        pluginOptions = attrs.options || {};
        return attrs.options = $.extend(true, pluginOptions, options);
      };
      return this.plugins[name] = attrs;
    },
    track: function(data, event) {
      var pluginData, pluginName, _ref;
      _ref = this.plugins;
      for (pluginName in _ref) {
        pluginData = _ref[pluginName];
        if (data instanceof jQuery) {
          if (!(event != null) || event.handleObj.namespace === ("atrackt." + pluginName)) {
            pluginData.send(this._getTrackObject(data, {
              event: event != null ? event.type : void 0,
              plugin: pluginName
            }));
          }
        } else if (data instanceof Object) {
          pluginData.send(this._getTrackObject(data, {
            plugin: pluginName
          }));
        }
      }
      return true;
    },
    refresh: function() {
      var pluginData, pluginName, _ref;
      $('*').off('.atrackt');
      if (typeof this._debug === "function" ? this._debug() : void 0) {
        $('#atrackt-elements tbody').empty();
      }
      _ref = this.plugins;
      for (pluginName in _ref) {
        pluginData = _ref[pluginName];
        this._bindEvents(pluginName, pluginData.events);
      }
      return true;
    },
    _getTrackObject: function(data, additionalData) {
      var $el, trackObject, _base;
      if (additionalData == null) {
        additionalData = {};
      }
      return trackObject = data instanceof jQuery ? ($el = data, $el.data('track-object', {
        location: this._getLocation(),
        categories: this._getCategories($el),
        value: this._getValue($el)
      }), $.extend($el.data('track-object'), additionalData), typeof (_base = $el.data('track-function')) === "function" ? _base($el.data('track-object')) : void 0, $el.data('track-object')) : data instanceof Object ? ($.extend(data, {
        location: this._getLocation()
      }), data) : (console.log('DATA IS NOT TRACKABLE', data), false);
    },
    _getLocation: function() {
      return $('body').data('track-location') || $(document).attr('title') || document.URL;
    },
    _getCategories: function($el) {
      var catArray;
      catArray = [];
      if ($el.data('track-cat')) {
        catArray.unshift($el.data('track-cat'));
      }
      $el.parents('[data-track-cat]').each(function() {
        return catArray.unshift($(this).data('track-cat'));
      });
      return catArray;
    },
    _getValue: function($el) {
      return $el.attr('title') || $el.attr('name') || $el.text() || $el.val() || $el.attr('id') || $el.attr('class');
    },
    _bindEvents: function(plugin, eventsObject) {
      var event, selectorArray, selectors, _results;
      if (!eventsObject) {
        return false;
      }
      _results = [];
      for (event in eventsObject) {
        selectorArray = eventsObject[event];
        selectors = $(selectorArray.join(','));
        if ($(document).livequery != null) {
          _results.push(selectors.livequery(function() {
            return Atrackt._initEl($(this), plugin, event);
          }));
        } else {
          _results.push(selectors.each(function() {
            return Atrackt._initEl($(this), plugin, event);
          }));
        }
      }
      return _results;
    },
    _initEl: function($el, plugin, event) {
      $el.on("" + event + ".atrackt." + plugin, function(e) {
        return Atrackt.track($el, e);
      });
      if (typeof this._debug === "function" ? this._debug() : void 0) {
        return this._debugEl($el, plugin, event);
      }
    },
    _urlParams: function(key) {
      var paramString, params;
      if (key == null) {
        key = null;
      }
      params = {};
      paramString = window.location.search.substring(1);
      $.each(paramString.split('&'), function(i, param) {
        var paramObject;
        paramObject = param.split('=');
        return params[paramObject[0]] = paramObject[1];
      });
      if (key) {
        return params[key];
      } else {
        return params;
      }
    }
  };

}).call(this);
