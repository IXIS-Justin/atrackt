// Generated by CoffeeScript 1.8.0

/*
Atrackt Tracking Library
https://github.com/brewster1134/atrackt
@version 1.0.2
@author Ryan Brewster
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    if (location.href.indexOf('atracktConsole') > -1) {
      if (typeof define === 'function' && define.amd) {
        return define(['jquery', 'atrackt', 'jquery.scrollTo'], function($, Atrackt) {
          return $(function() {
            return window.Atrackt = new (factory($, Atrackt.constructor));
          });
        });
      } else {
        return window.Atrackt = new (factory(window.jQuery, window.Atrackt.constructor));
      }
    }
  })(this, function($, Atrackt) {
    var AtracktConsole;
    return AtracktConsole = (function(_super) {
      __extends(AtracktConsole, _super);

      function AtracktConsole() {
        var consoleHtml;
        consoleHtml = "<div id=\"atrackt-console\">\n  <h4>Location: <span id=\"atrackt-location\"></span></h4>\n  <table>\n    <thead>\n      <tr>\n        <th>Plugin</th>\n        <th>Event</th>\n        <th>Categories</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n<div>";
        this.$console = $(consoleHtml);
        $('#atrackt-location', this.$console).text(this._getLocation());
        $('body').addClass('atrackt-console').prepend(this.$console);
        this._renderConsoleElements();
      }

      AtracktConsole.prototype.setPlugin = function(pluginName, plugin) {
        AtracktConsole.__super__.setPlugin.call(this, pluginName, plugin);
        if (plugin) {
          plugin._send = plugin.send;
          return plugin.send = function(data, options) {
            return console.log(plugin.name, data, options);
          };
        }
      };

      AtracktConsole.prototype._renderConsoleElements = function() {
        var element, elements, eventType, plugin, pluginName, _i, _len, _ref, _ref1, _results;
        $('tbody', this.$console).empty();
        _ref = this._elements;
        for (eventType in _ref) {
          elements = _ref[eventType];
          for (_i = 0, _len = elements.length; _i < _len; _i++) {
            element = elements[_i];
            this._renderConsoleElement('ALL', element, eventType);
          }
        }
        _ref1 = this.plugins;
        _results = [];
        for (pluginName in _ref1) {
          plugin = _ref1[pluginName];
          _results.push((function() {
            var _ref2, _results1;
            _ref2 = plugin._elements;
            _results1 = [];
            for (eventType in _ref2) {
              elements = _ref2[eventType];
              _results1.push((function() {
                var _j, _len1, _results2;
                _results2 = [];
                for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
                  element = elements[_j];
                  _results2.push(this._renderConsoleElement(pluginName, element, eventType));
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      AtracktConsole.prototype._registerElement = function(context, element, event) {
        var contextName;
        AtracktConsole.__super__._registerElement.call(this, context, element, event);
        contextName = context.name ? context.name : 'ALL';
        return this._renderConsoleElement(contextName, element, event);
      };

      AtracktConsole.prototype._renderConsoleElement = function(contextName, element, eventType) {
        var $rowEl, $trackEl, elementValueId, self, trackObject;
        self = this;
        trackObject = this._getTrackObject(element, eventType);
        elementValueId = trackObject._categories.slice(0);
        elementValueId.unshift(trackObject._value);
        elementValueId.unshift(eventType);
        elementValueId = elementValueId.join('-').toLowerCase().replace(/[^a-z]/g, '');
        $rowEl = $("<tr><td>" + contextName + "</td><td>" + eventType + "</td><td>" + trackObject._categories + "</td><td>" + trackObject._value + "</td></tr>");
        $trackEl = $(element);
        if ($("tr#" + elementValueId, this.$console).length) {
          $("tr#" + elementValueId, this.$console).addClass('error');
          $rowEl.addClass('error');
        }
        $('tbody', this.$console).append($rowEl);
        $rowEl.attr('id', elementValueId);
        $trackEl.attr('data-atrackt-id', elementValueId);
        return $rowEl.add($trackEl).hover(function() {
          $rowEl.addClass('atrackt-console-active');
          $trackEl.addClass('atrackt-console-active');
          if ($.scrollTo) {
            if (this === $rowEl[0]) {
              console.log('row');
              return $.scrollTo($trackEl, 0, {
                offset: {
                  top: -300
                }
              });
            } else if (this === $trackEl[0]) {
              console.log('element');
              return self.$console.scrollTo($rowEl, 0);
            }
          }
        }, function() {
          $rowEl.removeClass('atrackt-console-active');
          return $trackEl.removeClass('atrackt-console-active');
        });
      };

      return AtracktConsole;

    })(Atrackt);
  });

}).call(this);
