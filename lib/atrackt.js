// Generated by CoffeeScript 1.8.0

/*
Atrackt Tracking Library
https://github.com/brewster1134/atrackt
@version 1.0.2
@author Ryan Brewster
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], function($) {
        return window.Atrackt || (window.Atrackt = new (factory($)));
      });
    } else {
      return window.Atrackt || (window.Atrackt = new (factory($)));
    }
  })(this, function($) {
    var Atrackt;
    window.console || (window.console = {
      log: function() {},
      error: function() {}
    });
    return Atrackt = (function() {
      function Atrackt() {}

      Atrackt.prototype.plugins = {};

      Atrackt.prototype._data = {};

      Atrackt.prototype._options = {};

      Atrackt.prototype._elements = {};

      Atrackt.prototype._callbacks = {};

      Atrackt.prototype.setPlugin = function(pluginName, plugin) {
        if (!pluginName) {
          throw 'ATRACKT ERROR: `setPlugin` - No plugin name defined';
        }
        if (typeof (plugin != null ? plugin.send : void 0) !== 'function') {
          throw "ATRACKT ERROR: `setPlugin` - No send method was defined for `" + pluginName + "`.";
        }
        pluginName = pluginName.toLowerCase().replace(/[^a-z]/g, '-');
        this.plugins[pluginName] = plugin;
        plugin.name = pluginName;
        plugin._data || (plugin._data = {});
        plugin._options || (plugin._options = {});
        plugin._elements || (plugin._elements = {});
        plugin._callbacks || (plugin._callbacks = {});
        plugin.setEvent = (function(_this) {
          return function(eventsObject) {
            return _this.setEvent(eventsObject, plugin);
          };
        })(this);
        plugin.setData = (function(_this) {
          return function(data) {
            return _this.setData(data, plugin);
          };
        })(this);
        plugin.setOptions = (function(_this) {
          return function(options) {
            return _this.setOptions(options, plugin);
          };
        })(this);
        plugin.setCallback = (function(_this) {
          return function(name, callback) {
            return _this.setCallback(name, callback, plugin);
          };
        })(this);
        return plugin.track = (function(_this) {
          return function(data, options, event, plugin) {
            return _this.track(data, options, event, plugin);
          };
        })(this);
      };

      Atrackt.prototype.setEvent = function(eventsObject, context) {
        var eventType, globalEvent, object, objects, pluginEvent, _results;
        if (context == null) {
          context = this;
        }
        if (!eventsObject) {
          throw 'ATRACKT ERROR: `setEvent` - You must pass a valid event object.';
        }
        _results = [];
        for (eventType in eventsObject) {
          objects = eventsObject[eventType];
          globalEvent = [eventType, 'atrackt'];
          pluginEvent = globalEvent.slice(0);
          if (context.name) {
            pluginEvent.push(context.name);
          }
          if (!(objects instanceof Array)) {
            objects = [objects];
          }
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = objects.length; _i < _len; _i++) {
              object = objects[_i];
              _results1.push($(object).each((function(_this) {
                return function(index, element) {
                  var globalIndex, pluginData, pluginIndex, pluginName, _base, _base1, _ref, _ref1, _ref2, _results2;
                  (_base = _this._elements)[eventType] || (_base[eventType] = []);
                  if (context.name) {
                    globalIndex = _this._elements[eventType].indexOf(element);
                    if (globalIndex === -1) {
                      (_base1 = context._elements)[eventType] || (_base1[eventType] = []);
                      if (context._elements[eventType].indexOf(element) === -1) {
                        return _this._registerElement(context, element, eventType);
                      }
                    }
                  } else if (_this._elements[eventType].indexOf(element) === -1) {
                    _this._registerElement(context, element, eventType);
                    _ref = _this.plugins;
                    _results2 = [];
                    for (pluginName in _ref) {
                      pluginData = _ref[pluginName];
                      pluginIndex = (_ref1 = pluginData._elements[eventType]) != null ? _ref1.indexOf(element) : void 0;
                      if (pluginIndex !== -1) {
                        _results2.push((_ref2 = pluginData._elements[eventType]) != null ? _ref2.splice(pluginIndex, 1) : void 0);
                      } else {
                        _results2.push(void 0);
                      }
                    }
                    return _results2;
                  }
                };
              })(this)));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Atrackt.prototype.setData = function(data, context) {
        if (context == null) {
          context = this;
        }
        return $.extend(true, context._data, data);
      };

      Atrackt.prototype.setOptions = function(options, context) {
        if (context == null) {
          context = this;
        }
        return $.extend(true, context._options, options);
      };

      Atrackt.prototype.setCallback = function(name, callback, context) {
        var allowedCallbacks, _base;
        if (context == null) {
          context = this;
        }
        allowedCallbacks = ['before', 'after'];
        if (allowedCallbacks.indexOf(name) === -1) {
          throw "ATRACKT ERROR: `setCallback` - `" + name + "` is not a valid callback.  Only callbacks allowed are: " + (allowedCallbacks.join(', '));
        }
        (_base = context._callbacks)[name] || (_base[name] = []);
        return context._callbacks[name].push(callback);
      };

      Atrackt.prototype.track = function(data, options, event, context) {
        var eventNamespace, pluginData, pluginName, _ref, _results;
        if (options == null) {
          options = {};
        }
        if (context != null ? context.name : void 0) {
          options['_plugin'] = context.name;
        }
        _ref = this.plugins;
        _results = [];
        for (pluginName in _ref) {
          pluginData = _ref[pluginName];
          if (event) {
            eventNamespace = event != null ? event.handleObj.namespace : void 0;
            if (eventNamespace === 'atrackt' || eventNamespace === ("atrackt." + pluginName)) {
              _results.push(this._trackJqueryObject(pluginData, data, options, event));
            } else {
              _results.push(void 0);
            }
          } else {
            if (!options['_plugin'] || options['_plugin'] === pluginName) {
              if (data instanceof jQuery) {
                _results.push(this._trackJqueryObject(pluginData, data, options, event));
              } else {
                _results.push(this._track(pluginData, data, options, event));
              }
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      };

      Atrackt.prototype._registerElement = function(context, element, event) {
        var globalEvent, pluginEvent;
        context._elements[event].push(element);
        globalEvent = [event, 'atrackt'];
        if (context.name) {
          pluginEvent = globalEvent.slice(0);
          if (context.name) {
            pluginEvent.push(context.name);
          }
        } else {
          pluginEvent = globalEvent;
        }
        $(element).off(globalEvent.join('.'));
        return $(element).on(pluginEvent.join('.'), function(e) {
          return context.track(this, {}, e);
        });
      };

      Atrackt.prototype._trackJqueryObject = function(plugin, data, options, event) {
        return $(data).each((function(_this) {
          return function(index, element) {
            return _this._track(plugin, element, options, event);
          };
        })(this));
      };

      Atrackt.prototype._track = function(plugin, data, options, event) {
        var callback, metaData, optionsCopy, trackingData, trackingOptions, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
        metaData = this._getTrackObject(data, event);
        if (!metaData) {
          throw 'ATRACKT ERROR: `track` - Only valid selectors, jquery objects, or html nodes are supported.';
        }
        trackingData = $.extend(true, {}, this._data, plugin._data, options['_data'] || {}, metaData);
        optionsCopy = $.extend(true, {}, options);
        delete optionsCopy['_data'];
        trackingOptions = $.extend(true, {}, this._options, plugin._options, optionsCopy);
        _ref = this._callbacks['before'] || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          if (typeof callback === "function") {
            callback(trackingData, trackingOptions);
          }
        }
        _ref1 = plugin._callbacks['before'] || [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          callback = _ref1[_j];
          if (typeof callback === "function") {
            callback(trackingData, trackingOptions);
          }
        }
        if (data instanceof jQuery || data.nodeType === 1) {
          if (typeof $(data).data('atrackt-function') === 'function') {
            $.proxy($(data).data('atrackt-function'), data)(trackingData, trackingOptions);
          }
        }
        plugin.send(trackingData, trackingOptions);
        _ref2 = plugin._callbacks['after'] || [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          callback = _ref2[_k];
          if (typeof callback === "function") {
            callback(trackingData, trackingOptions);
          }
        }
        _ref3 = this._callbacks['after'] || [];
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          callback = _ref3[_l];
          _results.push(typeof callback === "function" ? callback(trackingData, trackingOptions) : void 0);
        }
        return _results;
      };

      Atrackt.prototype._getTrackObject = function(data, event) {
        var $el;
        if (data instanceof jQuery || data.nodeType === 1) {
          $el = $(data);
          data = {
            _categories: this._getCategories($el),
            _value: this._getValue($el)
          };
        }
        data['_location'] = this._getLocation();
        if (event != null ? event.type : void 0) {
          data['_event'] = event.type;
        }
        return data;
      };

      Atrackt.prototype._getLocation = function() {
        return $('body').data('atrackt-location') || $(document).attr('title') || document.URL;
      };

      Atrackt.prototype._getCategories = function($el) {
        var catArray;
        catArray = [];
        if ($el.data('atrackt-category')) {
          catArray.unshift($el.data('atrackt-category'));
        }
        $el.parents('[data-atrackt-category]').each(function() {
          return catArray.unshift($(this).data('atrackt-category'));
        });
        return catArray;
      };

      Atrackt.prototype._getValue = function($el) {
        return $el.data('atrackt-value') || $el.attr('title') || $el.attr('name') || $el.text().trim() || $el.val() || $el.attr('id') || $el.attr('class');
      };

      return Atrackt;

    })();
  });

}).call(this);
